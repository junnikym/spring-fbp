package org.junnikym.springfbp

import java.io.ByteArrayOutputStream
import java.io.PrintStream
import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.TestPropertySource


@SpringBootTest
@TestPropertySource(locations= ["classpath:test.properties"])
class ScriptInterpreterTest {

    private val outContent = ByteArrayOutputStream()
    private val originalOut = System.out

    @BeforeEach
    fun setUpStreams() {
        System.setOut(PrintStream(outContent))
    }

    @AfterEach
    fun restoreStreams() {
        System.setOut(originalOut)
    }

    @Test
    fun `eval java codes as script`() {

        // given
        val scriptInterpreter = JavaScriptInterpreter()

        // when
        scriptInterpreter.eval("""
            void javaEcho(String message) {
                System.out.println(message);
            }
            javaEcho("this is first message");
        """.trimIndent())

        // then
        val capturedOutput = outContent.toString().trim()
        assertEquals("""
            this is first message
        """.trimIndent(), capturedOutput)
    }

    @Test
    fun `get java classes that generated by script interpreter`() {
        // given
        val scriptInterpreter = JavaScriptInterpreter()

        scriptInterpreter.eval("""
            class DummyJavaClassA { }
            class DummyJavaClassB { }
        """.trimIndent())

        // when
        val classNames = scriptInterpreter.getClassNames()

        // then
        assertTrue(classNames.contains("DummyJavaClassA"))
        assertTrue(classNames.contains("DummyJavaClassB"))
    }

    @Test
    fun `get java methods that generated by script interpreter`() {
        // given
        val scriptInterpreter = JavaScriptInterpreter()

        scriptInterpreter.eval("""
            void javaEchoReverse(String message) {
                System.out.println(new StringBuilder(message).reverse());
            }
        
            void javaEcho(String message, boolean reverse, int repeat) {
                final String text = reverse 
                        ? new StringBuilder(message).reverse().toString() 
                        : message;
        
                for(int i = 0; i < repeat; i++) {
                    System.out.println(text);
                }
            }
        """.trimIndent())

        // when
        val methodSignature = scriptInterpreter.getMethodSignatures()

        // then
        assertTrue(methodSignature.contains("javaEchoReverse(Ljava/lang/String;)V"))
        assertTrue(methodSignature.contains("javaEcho(Ljava/lang/String;ZI)V"))
    }




    @Test
    fun `eval kotlin codes as script`() {
        // given
        val scriptInterpreter = KotlinScriptInterpreter()

        // when
        scriptInterpreter.eval("""
            fun ktEcho(message: String) {
                println(message)
            }
            ktEcho("this is first message");
        """.trimIndent())

        // then
        val capturedOutput = outContent.toString().trim()
        assertEquals("""
            this is first message
        """.trimIndent(), capturedOutput)
    }

    @Test
    fun `get kotlin classes that generated by script interpreter`() {
        // given
        val scriptInterpreter = KotlinScriptInterpreter()

        scriptInterpreter.eval("""
            class DummyKtClassA() { }
            class DummyKtClassB() { }
        """.trimIndent())

        // when
        val classNames = scriptInterpreter.getClassNames()

        // then
        assertTrue(classNames.contains("DummyKtClassA"))
        assertTrue(classNames.contains("DummyKtClassB"))
    }

    @Test
    fun `get kotlin functions that generated by script interpreter`() {
        // given
        val scriptInterpreter = KotlinScriptInterpreter()

        scriptInterpreter.eval("""
            fun ktEchoReverse(message: String) {
                println(StringBuilder(message).reverse())
            }
            fun ktEcho(message: String, reverse: Boolean = false, repeat: Int = 1) {
                val text = when(reverse) {
                    true-> StringBuilder(message).reverse().toString() 
                    else-> message
                }
                        
                for(i in 0..repeat)
                    println(text)
            }
        """.trimIndent())

        // when
        val methodSignature = scriptInterpreter.getMethodSignatures()

        // then
        assertTrue(methodSignature.contains("ktEchoReverse(Ljava/lang/String;)V"))
        assertTrue(methodSignature.contains("ktEcho(Ljava/lang/String;ZI)V"))
    }

}
